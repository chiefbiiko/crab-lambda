name: ci

on:
  push:
  pull_request:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  FUNC_NAME: crab-lambda-test-function
  RUNTIME_ZIP_FILE_NAME: runtime.zip
  VERSION: 0.0.0
  VERSION_DOTLESS: ${VERSION//./}
  RUNTIME_BUILD_IMAGE_TAG: docker.pkg.github.com/chiefbiiko/crab-lambda/crab-lambda-runtime-build-image:0.0.0-amazonlinux2
  LAMBDA_BUILD_IMAGE_TAG: docker.pkg.github.com/chiefbiiko/crab-lambda/crab-lambda-function-build-image:0.0.0-amazonlinux2
  BUNDLE_NAME: example.zip
  LIBRARY_NAME: libcrab_lambda_easy_example.so

jobs:
  build_runtime:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.2

      - name: build the runtime build image
        run: |
          docker build \
            --file=./Dockerfile \
            --tag=${{ env.RUNTIME_BUILD_IMAGE_TAG }} \
            .

      - name: build the runtime in the build container
        run: |
          docker run \
            --rm \
            --volume=$PWD:/home \
            --env=RUNTIME_ZIP_FILE_NAME=${{ env.RUNTIME_ZIP_FILE_NAME }} \
            ${{ env.RUNTIME_BUILD_IMAGE_TAG }}

      - name: upload the runtime layer artifact
        uses: actions/upload-artifact@v2.1.4
        with:
          name: runtime
          path: ${{ env.RUNTIME_ZIP_FILE_NAME }}

  build_example:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.2
      - run: cd examples/easy

      - name: build the lambda build image
        run: |
          docker build \
            --file=./Dockerfile \
            --tag=${{ env.LAMBDA_BUILD_IMAGE_TAG }} \
            .

      - name: build the example in the custom build container
        run: |
          docker run \
            --rm \
            --env BUNDLE_NAME=${{ env.BUNDLE_NAME }} \
            --env LIBRARY_NAME=${{ env.LIBRARY_NAME }}  \
            --volume=$PWD:/home \
            ${{ env.LAMBDA_BUILD_IMAGE_TAG }}

      - name: upload the example bundle artifact
        uses: actions/upload-artifact@v2.1.4
        with:
          name: example
          path: ${{ env.BUNDLE_NAME }}

  test_crab_lambda:
    needs:
      - build_runtime
      - build_example
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.2
      
      - uses: actions/download-artifact@v2.0.5
        with:
          name: runtime

      - uses: actions/download-artifact@v2.0.5
        with:
          name: example

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.5.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: publish a new runtime layer version
        id: publish_layer
        run: |
          runtime_arn=$(
            aws lambda publish-layer-version \
              --layer-name=crab-lambda-runtime-${{ env.VERSION_DOTLESS }} \
              --description="crab-lambda-runtime ${{ env.VERSION }}" \
              --compatible-runtimes=provided \
              --license-info=MIT \
              --zip-file=fileb://${{ env.RUNTIME_ZIP_FILE_NAME }} \
            | \
            jq '.LayerVersionArn'
          )
          echo ::set-output name=runtime_arn::$runtime_arn

      - name: delete any existing test function
        run: |
          if >/dev/null aws lambda get-function \
            --function-name=${{ env.FUNC_NAME }}; then
            aws lambda delete-function \
              --function-name=${{ env.FUNC_NAME }}
          fi

      - name: deploy the example lambda
        run: |
          aws lambda create-function \
            --function-name=${{ env.FUNC_NAME }} \
            --runtime=provided \
            --role=${{ secrets.FUNC_EXEC_ROLE_ARN }} \
            --handler=example.handler \
            --description="testing crab-lambda" \
            --timeout=3 \
            --memory-size=128 \
            --layers=${{ steps.publish_layer.outputs.runtime_arn }} \
            --zip-file=fileb://${{ env.EXAMPLE_ZIP_FILE_NAME }}

      - name: invoke the example lambda
        run: |
          time \
            aws lambda invoke \
              --function-name=${{ env.FUNC_NAME }} \
              --log-type=Tail  \
              ./response.json

          message="$(jq -r '.Payload.fraud' ./response.json)"

          # TODO: assert_equal n co
          if [[ "$message" != "money" ]]; then
            >&2 printf "%s does not equal %s\n" "$message" "money"
            exit 1
          fi

      - name: delete the example lambda
        run: |
          aws lambda delete-function --function-name=${{ env.FUNC_NAME }}
