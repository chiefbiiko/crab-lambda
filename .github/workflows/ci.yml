name: ci

on:
  push:
  pull_request:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: crab-lambda-test-lambda
  RUNTIME_ZIP_FILE_NAME: runtime.zip
  EXAMPLE_ZIP_FILE_NAME: example.zip
  VERSION: 0.0.0
  VERSION_DOTLESS: ${VERSION//./}
  DOCKER_BUILD_IMAGE_TAG: docker.pkg.github.com/chiefbiiko/crab-lambda/crab-lambda-runtime-build-image:0.0.0-amazonlinux2

jobs:
  build_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.0.0

      - name: build the build image
        run: |
          docker build \
            --file=./Dockerfile \
            --tag=${{ env.DOCKER_BUILD_IMAGE_TAG }} \
            .

      - name: docker.pkg.github.com login
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} \
          | \
          docker login docker.pkg.github.com \
            --username=$GITHUB_ACTOR \
            --password-stdin

      - name: publish the build image 2 docker.pkg.github.com
        run: docker push ${{ env.DOCKER_BUILD_IMAGE_TAG }}

  build_runtime:
    needs: build_image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.0.0

      - name: docker.pkg.github.com login
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} \
          | \
          docker login docker.pkg.github.com \
            --username=$GITHUB_ACTOR \
            --password-stdin

      - name: pull the build image 4rom docker.pkg.github.com
        run: docker pull ${{ env.DOCKER_BUILD_IMAGE_TAG }}

      - name: build the runtime in the custom build container
        run: |
          docker run \
            --rm \
            --volume=$PWD:/home \
            --env=RUNTIME_ZIP_FILE_NAME=${{ env.RUNTIME_ZIP_FILE_NAME }} \
            ${{ env.DOCKER_BUILD_IMAGE_TAG }}

      - name: upload the runtime layer artifact
        uses: actions/upload-artifact@v1
        with:
          path: ${{ env.RUNTIME_ZIP_FILE_NAME }}

  build_example:
    needs: build_image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.0.0

      - name: docker.pkg.github.com login
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} \
          | \
          docker login docker.pkg.github.com \
            --username=$GITHUB_ACTOR \
            --password-stdin

      - name: pull the build image 4rom docker.pkg.github.com
        run: docker pull ${{ env.DOCKER_BUILD_IMAGE_TAG }}

      - name: build the example in the custom build container
        # TODO: make a mvp docker file 4 building lambda-compat dylibs
        run: |
          docker run \
            --rm \
            --volume=$PWD:/home \
            ${{ env.DOCKER_BUILD_IMAGE_TAG }} \
              cargo make \
                --cwd=examples/easy \
                --env=EXAMPLE_ZIP_FILE_NAME=${{ env.EXAMPLE_ZIP_FILE_NAME }} \
                example

      - name: upload the example bundle artifact
        uses: actions/upload-artifact@v1
        with:
          path: examples/easy/${{ env.EXAMPLE_ZIP_FILE_NAME }}
  test:
    name: test the runtime on AWS Lambda
    needs:
      - build_runtime
      - build_example
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.0.0
      - name: download the artifact
        uses: actions/download-artifact@v1
        with:
          name: artifact
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: publish a new runtime layer version
        id: publish_layer
        run: |
          runtime_arn=$(
            aws lambda publish-layer-version \
              --layer-name=crab-lambda-runtime-${{ env.VERSION_DOTLESS }} \
              --description="crab-lambda-runtime ${{ env.VERSION }}" \
              --compatible-runtimes=provided \
              --license-info=MIT \
              --zip-file=fileb://artifact/${{ env.RUNTIME_ZIP_FILE_NAME }} \
            | \
            jq '.LayerVersionArn'
          )
          echo ::set-output name=runtime_arn::$runtime_arn

      - name: delete any existing test function
        run: |
          if aws lambda get-function \
            --function-name=${{ env.LAMBDA_FUNCTION_NAME }}; then
            aws lambda delete-function \
              --function-name=${{ env.LAMBDA_FUNCTION_NAME }}
          fi

      - name: deploy the example lambda
        run: |
          aws lambda create-function \
            --function-name=${{ env.LAMBDA_FUNCTION_NAME }} \
            --runtime=provided \
            --role=${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }} \
            --handler=example.handler \
            --description="testing crab-lambda" \
            --timeout=3 \
            --memory-size=128 \
            --layers=${{ steps.publish_layer.outputs.runtime_arn }} \
            --zip-file=fileb://artifact/examples/easy/${{ env.EXAMPLE_ZIP_FILE_NAME }} \
          | \
          jq '.FunctionArn'

      - name: invoke the example lambda
        run: |
          time \
            aws lambda invoke \
              --function-name=${{ env.LAMBDA_FUNCTION_NAME }} \
              --log-type=Tail  \
              ./response.json
          
          jq -r '.Payload.ü¶Äüêë' ./response.json

      - name: delete the example lambda
        run: |
          aws lambda delete-function \
            --function-name=${{ env.LAMBDA_FUNCTION_NAME }}
